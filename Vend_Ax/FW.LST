C51 COMPILER V6.10  FW                                                                     11/04/2023 04:03:07 PAGE 1   


C51 COMPILER V6.10, COMPILATION OF MODULE FW
OBJECT MODULE PLACED IN .\FW.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE .\FW.C OPTIMIZE(6,SPEED) DEFINE(NO_RENUM) DEBUG OBJECTEXTEND

stmt level    source

   1          //-----------------------------------------------------------------------------
   2          //	File:		fw.c
   3          //	Contents:	Firmware frameworks task dispatcher and device request parser
   4          //				source.
   5          //
   6          //	Copyright (c) 2002 Cypress Semiconductor, Inc. All rights reserved
   7          //
   8          // $Archive: /USB/ez811/firmware/host/fw.c $
   9          // $Date: 1/23/02 11:25a $
  10          // $Revision: 4 $
  11          //-----------------------------------------------------------------------------
  12          #include "ezusb.h"
  13          #include "ezregs.h"
  14          
  15          //-----------------------------------------------------------------------------
  16          // Random Macros
  17          //-----------------------------------------------------------------------------
  18          #define	min(a,b) (((a)<(b))?(a):(b))
  19          #define	max(a,b) (((a)>(b))?(a):(b))
  20          
  21          //-----------------------------------------------------------------------------
  22          // Constants
  23          //-----------------------------------------------------------------------------
  24          
  25          //-----------------------------------------------------------------------------
  26          // Global Variables
  27          //-----------------------------------------------------------------------------
  28          volatile BOOL	GotSUD;
  29          BOOL		Rwuen;
  30          BOOL		Selfpwr;
  31          volatile BOOL	Sleep;						// Sleep mode enable flag
  32          
  33          WORD	pDeviceDscr;	// Pointer to Device Descriptor; Descriptors may be moved
  34          WORD	pConfigDscr;	
  35          WORD	pStringDscr;	
  36          
  37          //-----------------------------------------------------------------------------
  38          // Prototypes
  39          //-----------------------------------------------------------------------------
  40          void SetupCommand(void);
  41          void TD_Init(void);
  42          void TD_Poll(void);
  43          BOOL TD_Suspend(void);
  44          BOOL TD_Resume(void);
  45          
  46          BOOL DR_GetDescriptor(void);
  47          BOOL DR_SetConfiguration(void);
  48          BOOL DR_GetConfiguration(void);
  49          BOOL DR_SetInterface(void);
  50          BOOL DR_GetInterface(void);
  51          BOOL DR_GetStatus(void);
  52          BOOL DR_ClearFeature(void);
  53          BOOL DR_SetFeature(void);
  54          BOOL DR_VendorCmnd(void);
  55          
C51 COMPILER V6.10  FW                                                                     11/04/2023 04:03:07 PAGE 2   

  56          //-----------------------------------------------------------------------------
  57          // Code
  58          //-----------------------------------------------------------------------------
  59          
  60          // Task dispatcher
  61          void main(void)
  62          {
  63   1      	DWORD	i;
  64   1      	WORD	offset;
  65   1      	DWORD	DevDescrLen;
  66   1      	DWORD	j=0;
  67   1      	WORD	IntDescrAddr;
  68   1      	WORD	ExtDescrAddr;
  69   1      
  70   1      	// Initialize Global States
  71   1      	Sleep = FALSE;					// Disable sleep mode
  72   1      	Rwuen = FALSE;					// Disable remote wakeup
  73   1      	Selfpwr = FALSE;				// Disable self powered
  74   1      	GotSUD = FALSE;					// Clear "Got setup data" flag
  75   1      
  76   1      	// Initialize user device
  77   1      	TD_Init();
  78   1      
  79   1      	// The following section of code is used to relocate the descriptor table. 
  80   1      	// Since the SUDPTRH and SUDPTRL are assigned the address of the descriptor 
  81   1      	// table, the descriptor table must be located in on-part memory.
  82   1      	// The 4K demo tools locate all code sections in external memory.
  83   1      	// The descriptor table is relocated by the frameworks ONLY if it is found 
  84   1      	// to be located in external memory.
  85   1      	pDeviceDscr = (WORD)&DeviceDscr;
  86   1      	pConfigDscr = (WORD)&ConfigDscr;
  87   1      	pStringDscr = (WORD)&StringDscr;
  88   1      	if ((WORD)&DeviceDscr & 0xe000)
  89   1      	{
  90   2      		IntDescrAddr = INTERNAL_DSCR_ADDR;
  91   2      		ExtDescrAddr = (WORD)&DeviceDscr;
  92   2      		DevDescrLen = (WORD)&UserDscr - (WORD)&DeviceDscr + 2;
  93   2      		for (i = 0; i < DevDescrLen; i++)
  94   2      			*((BYTE xdata *)IntDescrAddr+i) = 0xCD;
  95   2      		for (i = 0; i < DevDescrLen; i++)
  96   2      			*((BYTE xdata *)IntDescrAddr+i) = *((BYTE xdata *)ExtDescrAddr+i);
  97   2      		pDeviceDscr = IntDescrAddr;
  98   2      		offset = (WORD)&DeviceDscr - INTERNAL_DSCR_ADDR;
  99   2      		pConfigDscr -= offset;
 100   2      		pStringDscr -= offset;
 101   2      	}
 102   1      
 103   1      	EZUSB_IRQ_ENABLE();				// Enable USB interrupt (INT2)
 104   1      	EZUSB_ENABLE_RSMIRQ();				// Wake-up interrupt
 105   1      
 106   1      	// The 8051 is responsible for all USB events, even those that have happened
 107   1      	// before this point.  We cannot ignore pending USB interrupts.
 108   1      	// The chip will come out of reset with the flags all cleared.
 109   1      	//	USBIRQ = 0xff;				// Clear any pending USB interrupt requests
 110   1      	PORTCCFG |= 0xc0;				// Turn on r/w lines for external memory 
 111   1      
 112   1      	USBBAV = USBBAV | 1 & ~bmBREAK;	// Disable breakpoints and autovectoring
 113   1      	USBIEN |= bmSUDAV | bmSUTOK | bmSUSP | bmURES;	// Enable selected interrupts
 114   1      	EA = 1;						// Enable 8051 interrupts
 115   1      
 116   1         #ifndef NO_RENUM
                 // Note: at full speed, high speed hosts may take 5 sec to detect device
C51 COMPILER V6.10  FW                                                                     11/04/2023 04:03:07 PAGE 3   

                 EZUSB_Discon(TRUE); // Renumerate
                 #endif
 120   1      
 121   1      
 122   1      	CKCON = (CKCON&(~bmSTRETCH)) | FW_STRETCH_VALUE; // Set stretch to 0 (after renumeration)
 123   1      
 124   1      	// Task Dispatcher
 125   1      	while(TRUE)					// Main Loop
 126   1      	{
 127   2      		if(GotSUD)				// Wait for SUDAV
 128   2      		{
 129   3      			SetupCommand();	 		// Implement setup command
 130   3        			GotSUD = FALSE;		   	// Clear SUDAV flag
 131   3      		}
 132   2      
 133   2      		// Poll User Device
 134   2      		// NOTE: Idle mode stops the processor clock.  There are only two
 135   2      		// ways out of idle mode, the WAKEUP pin, and detection of the USB
 136   2      		// resume state on the USB bus.  The timers will stop and the
 137   2      		// processor will not wake up on any other interrupts.
 138   2      		if (Sleep)
 139   2      		    {
 140   3          		if(TD_Suspend())
 141   3          		    { 
 142   4          		    Sleep = FALSE;	   		// Clear the "go to sleep" flag.  Do it here to prevent any race condition b
             -etween wakeup and the next sleep.
 143   4          		    do
 144   4          		        {
 145   5             			    EZUSB_Susp();			// Place processor in idle mode.
 146   5          		        }
 147   4                      while(!Rwuen && EZUSB_EXTWAKEUP());
 148   4                      // Must continue to go back into suspend if the host has disabled remote wakeup
 149   4                      // *and* the wakeup was caused by the external wakeup pin.
 150   4                      
 151   4          			// 8051 activity will resume here due to USB bus or Wakeup# pin activity.
 152   4          			EZUSB_Resume();	// If source is the Wakeup# pin, signal the host to Resume.		
 153   4          			TD_Resume();
 154   4          		    }   
 155   3      		    }
 156   2      		TD_Poll();
 157   2      	}
 158   1      }
 159          
 160          // Device request parser
 161          void SetupCommand(void)
 162          {
 163   1      	void	*dscr_ptr;
 164   1      	DWORD	i;
 165   1      
 166   1      	switch(SETUPDAT[1])
 167   1      	{
 168   2      		case SC_GET_DESCRIPTOR:						// *** Get Descriptor
 169   2      			if(DR_GetDescriptor())
 170   2      				switch(SETUPDAT[3])			
 171   2      				{
 172   3      					case GD_DEVICE:				// Device
 173   3      						SUDPTRH = MSB(pDeviceDscr);
 174   3      						SUDPTRL = LSB(pDeviceDscr);
 175   3      						break;
 176   3      					case GD_CONFIGURATION:			// Configuration
 177   3      						if(dscr_ptr = (void *)EZUSB_GetConfigDscr(SETUPDAT[2]))
 178   3      						{
C51 COMPILER V6.10  FW                                                                     11/04/2023 04:03:07 PAGE 4   

 179   4      							SUDPTRH = MSB(dscr_ptr);
 180   4      							SUDPTRL = LSB(dscr_ptr);
 181   4      						}
 182   3      						else
 183   3      							EZUSB_STALL_EP0(); 	// Stall End Point 0
 184   3      						break;
 185   3      					case GD_STRING:				// String
 186   3      						if(dscr_ptr = (void *)EZUSB_GetStringDscr(SETUPDAT[2]))
 187   3      						{
 188   4      							// Workaround for rev D errata number 8
 189   4      							// If you're certain that you will never run on rev D,
 190   4      							// you can just do this:
 191   4      							// SUDPTRH = MSB(dscr_ptr);
 192   4      							// SUDPTRL = LSB(dscr_ptr);
 193   4      							STRINGDSCR *sdp;
 194   4      							BYTE len;
 195   4      
 196   4      							sdp = dscr_ptr;
 197   4      
 198   4      							len = sdp->length;
 199   4      							if (len > SETUPDAT[6]) 
 200   4      								len = SETUPDAT[6]; //limit to the requested length
 201   4      							
 202   4      							while (len)
 203   4      							{
 204   5      								for(i=0; i<min(len,64); i++)
 205   5      									*(IN0BUF+i) = *((BYTE xdata *)sdp+i);
 206   5      
 207   5      								//set length and arm Endpoint
 208   5      								EZUSB_SET_EP_BYTES(IN0BUF_ID,min(len,64));	
 209   5      								len -= min(len,64);
 210   5                              (BYTE *)sdp += 64;
 211   5      
 212   5      								// Wait for it to go out (Rev C and above)
 213   5      								while(EP0CS & 0x04)
 214   5      									;
 215   5      							}
 216   4      
 217   4      							// Arm a 0 length packet just in case.  There was some reflector traffic about
 218   4      							// Apple hosts asking for too much data.  This will keep them happy and will
 219   4      							// not hurt valid hosts because the next SETUP will clear this.
 220   4      							EZUSB_SET_EP_BYTES(IN0BUF_ID,0);	
 221   4      							// Clear the HS-nak bit
 222   4      							EP0CS = bmHS;
 223   4      						}
 224   3      						else 
 225   3      							EZUSB_STALL_EP0();	// Stall End Point 0
 226   3      						break;
 227   3      					default:				// Invalid request
 228   3      						EZUSB_STALL_EP0();		// Stall End Point 0
 229   3      				}
 230   2      			break;
 231   2      		case SC_GET_INTERFACE:						// *** Get Interface
 232   2      			DR_GetInterface();
 233   2      			break;
 234   2      		case SC_SET_INTERFACE:						// *** Set Interface
 235   2      			DR_SetInterface();
 236   2      			break;
 237   2      		case SC_SET_CONFIGURATION:					// *** Set Configuration
 238   2      			DR_SetConfiguration();
 239   2      			break;
 240   2      		case SC_GET_CONFIGURATION:					// *** Get Configuration
C51 COMPILER V6.10  FW                                                                     11/04/2023 04:03:07 PAGE 5   

 241   2      			DR_GetConfiguration();
 242   2      			break;
 243   2      		case SC_GET_STATUS:						// *** Get Status
 244   2      			if(DR_GetStatus())
 245   2      				switch(SETUPDAT[0])
 246   2      				{
 247   3      					case GS_DEVICE:				// Device
 248   3      						IN0BUF[0] = ((BYTE)Rwuen << 1) | (BYTE)Selfpwr;
 249   3      						IN0BUF[1] = 0;
 250   3      						EZUSB_SET_EP_BYTES(IN0BUF_ID,2);
 251   3      						break;
 252   3      					case GS_INTERFACE:			// Interface
 253   3      						IN0BUF[0] = 0;
 254   3      						IN0BUF[1] = 0;
 255   3      						EZUSB_SET_EP_BYTES(IN0BUF_ID,2);
 256   3      						break;
 257   3      					case GS_ENDPOINT:			// End Point
 258   3      						IN0BUF[0] = EPIO[EPID(SETUPDAT[4])].cntrl & bmEPSTALL;
 259   3      						IN0BUF[1] = 0;
 260   3      						EZUSB_SET_EP_BYTES(IN0BUF_ID,2);
 261   3      						break;
 262   3      					default:				// Invalid Command
 263   3      						EZUSB_STALL_EP0();		// Stall End Point 0
 264   3      				}
 265   2      			break;
 266   2      		case SC_CLEAR_FEATURE:						// *** Clear Feature
 267   2      			if(DR_ClearFeature())
 268   2      				switch(SETUPDAT[0])
 269   2      				{
 270   3      					case FT_DEVICE:				// Device
 271   3      						if(SETUPDAT[2] == 1)
 272   3      							Rwuen = FALSE; 		// Disable Remote Wakeup
 273   3      						else
 274   3      							EZUSB_STALL_EP0();	// Stall End Point 0
 275   3      						break;
 276   3      					case FT_ENDPOINT:			// End Point
 277   3      						if(SETUPDAT[2] == 0)
 278   3                        {
 279   4      							EZUSB_UNSTALL_EP( EPID(SETUPDAT[4]) );
 280   4                           EZUSB_RESET_DATA_TOGGLE( SETUPDAT[4] );
 281   4                        }
 282   3      						else
 283   3      							EZUSB_STALL_EP0();	// Stall End Point 0
 284   3      						break;
 285   3      				}
 286   2      			break;
 287   2      		case SC_SET_FEATURE:						// *** Set Feature
 288   2      			if(DR_SetFeature())
 289   2      				switch(SETUPDAT[0])
 290   2      				{
 291   3      					case FT_DEVICE:				// Device
 292   3      						if(SETUPDAT[2] == 1)
 293   3      							Rwuen = TRUE;		// Enable Remote Wakeup
 294   3      						else
 295   3      							EZUSB_STALL_EP0();	// Stall End Point 0
 296   3      						break;
 297   3      					case FT_ENDPOINT:			// End Point
 298   3      						if(SETUPDAT[2] == 0)
 299   3      							EZUSB_STALL_EP( EPID(SETUPDAT[4]) );
 300   3      						else
 301   3      							EZUSB_STALL_EP0();	 // Stall End Point 0
 302   3      						break;
C51 COMPILER V6.10  FW                                                                     11/04/2023 04:03:07 PAGE 6   

 303   3      				}
 304   2      			break;
 305   2      		default:							// *** Invalid Command
 306   2      			if(DR_VendorCmnd())
 307   2      				EZUSB_STALL_EP0();				// Stall End Point 0
 308   2      	}
 309   1      
 310   1      	// Acknowledge handshake phase of device request
 311   1      	// Required for rev C does not effect rev B
 312   1      	EP0CS |= bmBIT1;
 313   1      }
 314          
 315          // Wake-up interrupt handler
 316          void resume_isr(void) interrupt WKUP_VECT
 317          {
 318   1      	EZUSB_CLEAR_RSMIRQ();
 319   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1116    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      6      27
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      4    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
